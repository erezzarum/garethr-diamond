<%-
handlers = Array(scope.lookupvar('diamond::extra_handlers'))

if scope.lookupvar('diamond::graphite_host') then
  handlers << "diamond.handler.#{scope.lookupvar('diamond::graphite_handler')}"
end
if scope.lookupvar('diamond::archive') then
  handlers << "diamond.handler.#{scope.lookupvar('diamond::archive_handler')}"
end
if scope.lookupvar('diamond::librato_user') and scope.lookupvar('diamond::librato_apikey') then
  handlers << 'diamond.handler.libratohandler.LibratoHandler'
end
if scope.lookupvar('diamond::riemann_host') then
  handlers << 'diamond.handler.riemann.RiemannHandler'
end
-%>
################################################################################
# Diamond Configuration File
################################################################################

################################################################################
### Options for the server
[server]

# Handlers for published metrics.
handlers = <%= Array(handlers).join(',') %>

# User diamond will run as
# Leave empty to use the current user
user =

# Group diamond will run as
# Leave empty to use the current group
group =

# Pid file
pid_file = /var/run/diamond.pid

# Directory to load collector modules from
collectors_path = /usr/share/diamond/collectors/

# Directory to load collector configs from
collectors_config_path = /etc/diamond/collectors/

<% if scope.lookupvar('diamond::collectors_load_delay') -%>
# Number of seconds between each collector load
collectors_load_delay = <%= scope.lookupvar('diamond::collectors_load_delay') %>

<% end -%>
# Directory to load handler configs from
handlers_config_path = /etc/diamond/handlers/

<% if scope.lookupvar('diamond::handlers_path') -%>
handlers_path = <%= scope.lookupvar('diamond::handlers_path') %>

<% end -%>
<% if scope.lookupvar('diamond::metric_queue_size') -%>
# Maximum number of metrics waiting to be processed by handlers.
# When metric queue is full, new metrics are dropped.
metric_queue_size = <%= scope.lookupvar('diamond::metric_queue_size') %>

<% end -%>
<% if scope.lookupvar('diamond::collectors_reload_interval') -%>
# Interval to reload collectors
collectors_reload_interval = <%= scope.lookupvar('diamond::collectors_reload_interval') %>

<% end -%>
################################################################################
### Options for handlers
[handlers]
# daemon logging handler(s)
keys = rotated_file

### Defaults options for all Handlers
[[default]]

[[ArchiveHandler]]

# File to write archive log files
log_file = <%= scope.lookupvar('diamond::archive_log') %>

# Number of days to keep archive log files
days = <%= scope.lookupvar('diamond::archive_days') %>

[[GraphiteHandler]]
### Options for GraphiteHandler

# Graphite server host
<% if scope.lookupvar('diamond::graphite_host') -%>
host = <%= scope.lookupvar('diamond::graphite_host') %>
<% else -%>
host = 127.0.0.1
<% end -%>

# Port to send metrics to
port = <%= scope.lookupvar('diamond::graphite_port') %>

<% if scope.lookupvar('diamond::graphite_protocol') -%>
# Protocol to use to send
proto = <%= scope.lookupvar('diamond::graphite_protocol') %>
<% end -%>

# Socket timeout (seconds)
timeout = <%= scope.lookupvar('diamond::graphite_timeout') %>

# Batch size for metrics
batch = <%= scope.lookupvar('diamond::graphite_batchsize') %>

[[GraphitePickleHandler]]
### Options for GraphitePickleHandler

# Graphite server host
<% if scope.lookupvar('diamond::graphite_host') -%>
host = <%= scope.lookupvar('diamond::graphite_host') %>
<% else -%>
host = 127.0.0.1
<% end -%>

# Port to send metrics to
port = <%= scope.lookupvar('diamond::graphite_pickle_port') %>

# Socket timeout (seconds)
timeout = <%= scope.lookupvar('diamond::graphite_timeout') %>

# Batch size for pickled metrics
batch = <%= scope.lookupvar('diamond::graphite_batchsize') %>

[[MySQLHandler]]
### Options for MySQLHandler

# MySQL Connection Info
hostname    = 127.0.0.1
port        = 3306
username    = root
password    =
database    = diamond
table       = metrics
# INT UNSIGNED NOT NULL
col_time    = timestamp
# VARCHAR(255) NOT NULL
col_metric  = metric
# VARCHAR(255) NOT NULL
col_value   = value

[[StatsdHandler]]
host = <%= scope.lookupvar('diamond::stats_host') %>
port = <%= scope.lookupvar('diamond::stats_port') %>

[[TSDBHandler]]
host = 127.0.0.1
port = 4242
timeout = 15

[[LibratoHandler]]
user = <%= @librato_user %>
apikey = <%= @librato_apikey %>

[[RiemannHandler]]
host = <%= @riemann_host %>
port = 5555
transport = tcp

################################################################################
### Options for collectors
[collectors]

[[default]]
### Defaults options for all Collectors

# Uncomment and set to hardcode a hostname for the collector path
# Keep in mind, periods are seperators in graphite
# hostname = my_custom_hostname

<% if scope.lookupvar('diamond::server_hostname') -%>
hostname = <%= scope.lookupvar('diamond::server_hostname') %>
<% end -%>

# If you prefer to just use a different way of calculating the hostname
# Uncomment and set this to one of these values:

# smart             = Default. Tries fqdn_short. If that's localhost, uses hostname_short

# fqdn_short        = Default. Similar to hostname -s
# fqdn              = hostname output
# fqdn_rev          = hostname in reverse (com.example.www)

# uname_short       = Similar to uname -n, but only the first part
# uname_rev         = uname -r in reverse (com.example.www)

# hostname_short    = `hostname -s`
# hostname          = `hostname`
# hostname_rev      = `hostname` in reverse (com.example.www)

# hostname_method = smart
<% if scope.lookupvar('diamond::hostname_method') -%>
hostname_method = <%= scope.lookupvar('diamond::hostname_method') %>
<% end -%>

# Path Prefix and Suffix
# you can use one or both to craft the path where you want to put metrics
# such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s
# path_prefix = servers
<% if scope.lookupvar('diamond::path_prefix') -%>
path_prefix = <%= scope.lookupvar('diamond::path_prefix') %>
<% end -%>
# path_suffix =
<% if scope.lookupvar('diamond::path_suffix') -%>
path_suffix = <%= scope.lookupvar('diamond::path_suffix') %>
<% end -%>
<% if scope.lookupvar('diamond::instance_prefix') -%>
instance_prefix = <%= scope.lookupvar('diamond::instance_prefix') %>
<% end -%>

# Default Poll Interval (seconds)
interval = <%= scope.lookupvar('diamond::interval') %>

<% if scope.lookupvar('diamond::default_collectors') -%>
################################################################################
# Default enabled collectors
################################################################################

[[CPUCollector]]
enabled = True

[[DiskSpaceCollector]]
enabled = True

[[DiskUsageCollector]]
enabled = True

[[LoadAverageCollector]]
enabled = True

[[MemoryCollector]]
enabled = True

[[VMStatCollector]]
enabled = True

<% end -%>
################################################################################
### Options for logging
# for more information on file format syntax:
# http://docs.python.org/library/logging.config.html#configuration-file-format

[loggers]
keys = root

# handlers are higher in this config file, in:
# [handlers]
# keys = ...

[formatters]
keys = default

[logger_root]
# to increase verbosity, set DEBUG
level = <%= scope.lookupvar('diamond::logger_level') %>
handlers = rotated_file
propagate = 1

[handler_rotated_file]
class = handlers.TimedRotatingFileHandler
level = <%= scope.lookupvar('diamond::rotate_level') %>
formatter = default
# rotate at midnight, each day and keep <%= scope.lookupvar('diamond::rotate_days') %> days
args = ('/var/log/diamond/diamond.log', 'midnight', 1, <%= scope.lookupvar('diamond::rotate_days') %>)

[formatter_default]
format = [%(asctime)s] [%(threadName)s] %(message)s
datefmt =
